package com.med.salma;

import com.med.salma.R;
import com.med.salma.database.SalmaDatabaseAdapter;

import java.text.SimpleDateFormat;
import java.util.Calendar;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlarmManager;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.PendingIntent;
import android.app.TimePickerDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.TimePicker;
import android.widget.Toast;

public class NewReminderActivity extends Activity {
	EditText txtMedicineName;
	EditText txtMedInstructions;
	EditText txtDrugType;
	EditText txtFrequency;
	EditText txtSetTime;
	EditText txtStartDate;
	EditText txtEndDate;

	private Calendar refillCalendar;
	private Calendar reminderCalendar;
	private static final String TIME_FORMAT = "kk:mm";
	private static final String DATE_FORMAT = "yyyy-MM-dd";
	public static final String DATE_TIME_FORMAT = "yyyy-MM-dd kk:mm";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_new_reminder);
		// startReminder();

		// Get Reference of the widgets
		txtMedicineName = (EditText) findViewById(R.id.txtMedicineName);
		txtMedInstructions = (EditText) findViewById(R.id.txtMedInstructions);
		txtDrugType = (EditText) findViewById(R.id.txtDrugType);
		txtFrequency = (EditText) findViewById(R.id.txtDrugFrequency);
		txtSetTime = (EditText) findViewById(R.id.txtSetTime);
		txtStartDate = (EditText) findViewById(R.id.txtStartDate);
		txtEndDate = (EditText) findViewById(R.id.txtEndDate);

		// Initializing Calendar Instance
		reminderCalendar = Calendar.getInstance();
		refillCalendar = Calendar.getInstance();

	}

	// Reset Reminder
	public void resetReminder() {
		txtMedicineName.setText("");
		txtMedInstructions.setText("");
		txtDrugType.setText("");
		txtSetTime.setText("");
		txtFrequency.setText("");
		txtStartDate.setText("");
		txtEndDate.setText("");
	}

	// Add New Reminder
	public void addNewReminder(View view) {
		String med = txtMedicineName.getText().toString();
		String medIns = txtMedInstructions.getText().toString();
		String drugType = txtDrugType.getText().toString();
		String frequency = txtFrequency.getText().toString();
		String end_date = txtEndDate.getText().toString();

		SimpleDateFormat date_time_format = new SimpleDateFormat(
				DATE_TIME_FORMAT);
		String date_time_format_text = date_time_format.format(reminderCalendar
				.getTime());
		
		

		try {

			SalmaDatabaseAdapter sdb = new SalmaDatabaseAdapter(this);
			sdb.addReminder(med, medIns, drugType, frequency,
					date_time_format_text, end_date);
			
			setAlarm();

			Toast.makeText(getApplicationContext(),
					"Reminder To Take " + med + " Has Been Set!",
					Toast.LENGTH_LONG).show();
			resetReminder();

		} catch (Exception exception) {
			AlertDialog.Builder error = new AlertDialog.Builder(
					getApplicationContext());
			error.setTitle("Signin Error");
			error.setIcon(R.drawable.ic_launcher);
			error.setMessage(exception.getMessage().toString());
			AlertDialog alert = error.create();
			alert.show();
		}

	}

	// Drug Intake Frequency Method
	public void setTimesPerDay(View view) {
		final CharSequence[] items = { "1 Time/Day", "2 Times/Day",
				"3 Times/Day", "4 Times/Day", "5 Times/Day" };
		AlertDialog.Builder alertDialog = new AlertDialog.Builder(getParent());
		alertDialog.setTitle("Frequency of drug intake");
		alertDialog.setIcon(R.drawable.ic_launcher);
		alertDialog.setSingleChoiceItems(items, 0,
				new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						// TODO Auto-generated method stub
						txtFrequency.setText(items[which]);

					}
				});
		alertDialog.setPositiveButton("OK",
				new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						// TODO Auto-generated method stub

					}
				});
		alertDialog.setNegativeButton("Cancel",
				new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						// TODO Auto-generated method stub

					}
				});

		AlertDialog builder = alertDialog.create();
		builder.show();

	}

	// Set Time Method
	public void setTime(View view) {

		TimePickerDialog timePicker = new TimePickerDialog(this,
				new TimePickerDialog.OnTimeSetListener() {

					@Override
					public void onTimeSet(TimePicker view, int hourOfDay,
							int minute) {
						// TODO Auto-generated method stub
						reminderCalendar.set(Calendar.HOUR_OF_DAY, hourOfDay);
						reminderCalendar.set(Calendar.MINUTE, minute);
						updateTimeText();

					}
				}, reminderCalendar.get(Calendar.HOUR_OF_DAY),
				reminderCalendar.get(Calendar.MINUTE), true);
		timePicker.setTitle("Set Time");
		timePicker.setIcon(R.drawable.ic_launcher);
		timePicker.show();

	}

	// Update Time Text Method
	@SuppressLint("SimpleDateFormat")
	public void updateTimeText() {
		SimpleDateFormat time_format = new SimpleDateFormat(TIME_FORMAT);
		String time_for_textbox = time_format
				.format(reminderCalendar.getTime());
		txtSetTime.setText(time_for_textbox);
	}

	// Start Date Method
	public void startDate(View view) {
		DatePickerDialog datePicker = new DatePickerDialog(this,
				new DatePickerDialog.OnDateSetListener() {

					@Override
					public void onDateSet(DatePicker view, int year,
							int monthOfYear, int dayOfMonth) {
						reminderCalendar.set(Calendar.YEAR, year);
						reminderCalendar.set(Calendar.MONTH, monthOfYear);
						reminderCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
						updateStartDate();

					}
				}, reminderCalendar.get(Calendar.YEAR), reminderCalendar
						.get(Calendar.MONTH), reminderCalendar
						.get(Calendar.DAY_OF_MONTH));
		datePicker.setTitle("Set Start Date");
		datePicker.setIcon(R.drawable.ic_launcher);
		datePicker.show();

	}

	// Update Start Date
	public void updateStartDate() {
		SimpleDateFormat start_date_format = new SimpleDateFormat(DATE_FORMAT);
		String start_date_for_textbox = start_date_format
				.format(reminderCalendar.getTime());
		txtStartDate.setText(start_date_for_textbox);

	}

	// End Date Method
	public void endDate(View view) {

		DatePickerDialog datePicker = new DatePickerDialog(this,
				new DatePickerDialog.OnDateSetListener() {

					@Override
					public void onDateSet(DatePicker view, int year,
							int monthOfYear, int dayOfMonth) {
						// TODO Auto-generated method stub
						refillCalendar.set(Calendar.YEAR, year);
						refillCalendar.set(Calendar.MONTH, monthOfYear);
						refillCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
						updateEndDate();

					}
				}, refillCalendar.get(Calendar.YEAR),
				refillCalendar.get(Calendar.MONTH),
				refillCalendar.get(Calendar.DAY_OF_MONTH));
		datePicker.setTitle("Set End Date");
		datePicker.setIcon(R.drawable.ic_launcher);
		datePicker.show();

	}

	// Update End Date
	public void updateEndDate() {
		SimpleDateFormat end_date = new SimpleDateFormat(DATE_FORMAT);
		String end_date_textbox = end_date.format(refillCalendar.getTime());
		txtEndDate.setText(end_date_textbox);

	}

	// Method for choosing type of drug
	public void chooseDrug(View view) {
		final CharSequence[] drugTypes = { "Tablets", "Injection" };

		AlertDialog.Builder chooseDrug = new AlertDialog.Builder(this);
		chooseDrug.setIcon(R.drawable.ic_launcher);
		chooseDrug.setTitle("Drug Types");
		chooseDrug.setSingleChoiceItems(drugTypes, 0,
				new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						// TODO Auto-generated method stub
						txtDrugType.setText(drugTypes[which]);

					}
				});
		chooseDrug.setNegativeButton("OK",
				new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						// TODO Auto-generated method stub

					}
				});

		chooseDrug.setPositiveButton("Cancel",
				new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						// TODO Auto-generated method stub

					}
				});

		AlertDialog drugDialog = chooseDrug.create();
		drugDialog.show();

	}

	public void setAlarm() {
	    Intent intent = new Intent(this, SalmaBroadcastReceiver.class);
	    PendingIntent pendingIntent = PendingIntent.getBroadcast(this.getApplicationContext(), 0, intent, 0);
	    AlarmManager alarmManager = (AlarmManager) getSystemService(ALARM_SERVICE);
	    alarmManager.set(AlarmManager.RTC_WAKEUP, reminderCalendar.getTimeInMillis(), pendingIntent);
	    Toast.makeText(this, "Alarm is set",Toast.LENGTH_LONG).show();

	}

}
